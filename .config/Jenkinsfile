pipeline {
    agent any

    environment {
        ARTIFACT_NAME = 'agbar-fh-kafka2kafka'
        NODE_VERSION = '20.11.1'
    }

    options {
        timestamps()
        ansiColor('xterm')
    }

    tools {
        nodejs NODE_VERSION
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
                sh 'git fetch --unshallow || true'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'yarn install'
            }
        }

        stage('Run Tests and Generate Coverage Report') {
            steps {
                sh 'yarn run test'
                publishHTML(target: [
                    reportName: 'Test Report',
                    reportDir: 'coverage',
                    reportFiles: 'index.html',
                    keepAll: true
                ])
            }
        }

        stage('Publish Code Coverage Results') {
            steps {
                junit '**/test-results.xml'
                cobertura coberturaReportFile: '**/coverage/cobertura-coverage.xml'
            }
        }

        stage('Build Artifact') {
            steps {
                sh 'yarn run build:production'
            }
        }

        stage('Package Artifact') {
            steps {
                script {
                    // Simular cambio de versión en package.json y artifact.dna
                    sh '''
                        find artifacts \\( -name "package.json" -o -name "artifact.dna" \\) -exec \
                        sed -i -E "s/\\"version\\": \\"[0-9]+\\.[0-9]+\\.[0-9]+\\"/\\"version\\": \\"${BUILD_NUMBER}\\"/" {} +
                    '''

                    // Instalar solo dependencias de producción
                    sh 'yarn install --production'

                    // Preparar node_modules y comprimir por entorno
                    ['linux', 'windows'].each { envName ->
                        sh """
                            mkdir -p artifacts/${envName}/node_modules
                            cp -r node_modules/* artifacts/${envName}/node_modules/

                            mkdir -p ${ARTIFACT_NAME}
                            cd artifacts/${envName}
                            zip -r ../../${ARTIFACT_NAME}/${ARTIFACT_NAME}-${envName}.zip ./*
                            cd ../..
                        """
                    }

                    // Publicar artefactos
                    archiveArtifacts artifacts: "${ARTIFACT_NAME}/*.zip", fingerprint: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    if (isUnix()) {
                        sh "docker build -t myregistry/${ARTIFACT_NAME}:latest ."
                    } else {
                        bat "docker build -t myregistry/${ARTIFACT_NAME}:latest ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        if (isUnix()) {
                            sh '''
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin myregistry
                            docker push myregistry/${ARTIFACT_NAME}:latest
                            '''
                        } else {
                            bat '''
                            echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin myregistry
                            docker push myregistry/${ARTIFACT_NAME}:latest
                            '''
                        }
                    }
                }
            }
        }

        stage('Publish Release Notes') {
            steps {
                script {
                    def releaseNotes = """## Release ${env.BUILD_NUMBER}\n\n- New features and bug fixes included.\n- Docker images updated.\n"""
                    writeFile file: 'release_notes.md', text: releaseNotes
                    archiveArtifacts artifacts: 'release_notes.md', allowEmptyArchive: true
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
    }
}


