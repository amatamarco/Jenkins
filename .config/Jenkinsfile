pipeline {
  agent any

  options {
    timestamps()
  }

  environment {
    ARTIFACT_NAME = "agbar-fh-kafka2kafka"
    NODE_ENV = 'production'  
    FEED_URL = 'https://mi-feed-npm.com'  
    VERSION_FILE = 'version.json'  
    DOCKER_IMAGE = "myregistry/myimage:${GIT_COMMIT}"  
  }

  stages {
    stage('Install Node.js') {
      steps {
        sh """
          curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          apt-get install -y nodejs
        """
      }
    }

    stage("Install Yarn") {
      steps {
        sh 'npm install -g yarn'
      }
    }

    stage("Install dependencies") {
      steps {
        script {
          if (env.BRANCH_NAME == 'main') {
            echo "Instalando dependencias desde el feed privado"
            sh "npm config set registry ${FEED_URL}"
            sh "yarn install"
          } else {
            echo "Instalando dependencias para rama de desarrollo"
            sh "yarn install"
          }
        }
      }
    }

    stage("Build production") {
      steps {
        sh "yarn run build:production"
      }
    }

    stage("Run tests and coverage") {
      steps {
        script {
          if (env.BRANCH_NAME == 'main') {
            echo "Ejecutando pruebas unitarias y an√°lisis de cobertura en la rama principal"
            sh "yarn run test --coverage"
          } else {
            echo "Ejecutando pruebas unitarias en la rama de desarrollo"
            sh "yarn run test"
          }
        }
      }
    }

    stage("Install production dependencies") {
      steps {
        sh "yarn install --production"
      }
    }

    stage("Docker Build and Push") {
      when {
        branch 'main'
      }
      steps {
        script {
          echo "Construyendo y subiendo la imagen Docker"
          sh """
            docker build -t ${DOCKER_IMAGE} .
            docker push ${DOCKER_IMAGE}
          """
        }
      }
    }

    stage("Package Artifact") {
      steps {
        script {
          echo "Empaquetando artefacto en un archivo .zip"
          sh "zip -r ${ARTIFACT_NAME}.zip ./dist"
        }
      }
    }

    stage("Publish Artifact") {
      steps {
        script {
          echo "Publicando artefacto a un repositorio"
          sh "curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -T ${ARTIFACT_NAME}.zip 'https://artifactory.mirepositorio.com/artifactory/libs-release-local/${ARTIFACT_NAME}.zip'"
        }
      }
    }

    stage("Release Notes") {
      steps {
        script {
          echo "Generando Release Notes"
          sh "generate-release-notes --version ${VERSION_FILE}"
        }
      }
    }
  }

  post {
    success {
      echo "Pipeline ejecutado exitosamente!"
    }
    failure {
      echo "Hubo un error en el pipeline"
    }
  }
}
