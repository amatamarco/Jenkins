pipeline {
    agent any
    environment {
        WIKI_REPO_USER = credentials('wiki-repo-user')
        WIKI_REPO_PAT = credentials('wiki-repo-pat')
    }
    parameters {
        string(name: 'artifactName', defaultValue: 'NameNotSet', description: 'Artifact name')
        string(name: 'artifactWikiFileName', defaultValue: '${artifactName}', description: 'Name of the WIKI file')
        string(name: 'wikiRepoUrl', defaultValue: 'NameNotSet', description: 'Wiki URL')
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies...'
                sh 'npm install'
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                sh 'npm test' 
            }
        }

        stage('Build Project') {
            steps {
                echo 'Building the project...'
                sh 'npm run build'
            }
        }
        
        stage('Generate Documentation') {
            steps {
                echo 'Generating documentation with TypeDoc...'
                dir('docs') {
                    sh 'npx typedoc --options ../typedoc.json'
                }
            }
        }

        stage('Generate Release Notes') {
            steps {
                echo 'Generating release notes...'
                task: XplatGenerateReleaseNotes@3 {
                    displayName: 'Generate Release Notes'
                    inputs: [
                        outputfile: 'RELEASE.md',
                        templateLocation: 'InLine',
                        inlinetemplate: '''--------------------------------------------
      
      ##   **{{buildDetails.buildNumber}}** - {{date buildDetails.finishTime "DD-MM-YYYY"}}
      {{#if (hasWorkItemType this.workItems 'Product Backlog Item')}}
      ###   Notable changes
      {{#forEach this.workItems}}
      {{#if (eq (lookup this.fields 'System.WorkItemType' ) 'Product Backlog Item')}}
        - #{{this.id}}  
      {{#if (lookup this.fields 'System.Description')}}
          - {{ sanitize (lookup this.fields 'System.ReleaseNotes')}}
      {{/if}}
      {{/if}}
      {{/forEach}}
      {{/if}}
      {{#if (hasWorkItemType this.workItems 'Bug')}}
      ###   Bugfixes
      {{#forEach this.workItems}}
      {{#if (eq (lookup this.fields 'System.WorkItemType' ) 'Bug')}}
        - #{{this.id}} 
      {{#if (lookup this.fields 'System.ReleaseNotes')}}
          - {{sanitize (lookup this.fields 'System.ReleaseNotes')}}
      {{/if}}
      {{/if}}
      {{/forEach}}
      {{/if}}
      {{#if (hasWorkItemType this.workItems 'Task')}}
      ###   Tasks
      {{#forEach this.workItems}}
      {{#if (eq (lookup this.fields 'System.WorkItemType' ) 'Task')}}
        - #{{this.id}} 
      {{#if (lookup this.fields 'System.ReleaseNotes')}}
          - {{sanitize (lookup this.fields 'System.ReleaseNotes')}}
      {{/if}}
      {{/if}}
      {{/forEach}}
      {{/if}}'''
                }
            }
        }

        stage('Push Release Notes to Wiki') {
            steps {
                echo 'Pushing release notes to WIKI...'
                task: WikiUpdaterTask@1 {
                    repo: '${{parameters.wikiRepoUrl}}'
                    filename: '${{parameters.artifactWikiFileName}}.md'
                    replaceFile: false
                    dataIsFile: true
                    sourceFile: 'RELEASE.md'
                    message: 'doc(wiki): update release notes for ${{parameters.artifactName}}'
                    gitname: '$BUILD_REQUESTEDFOR'
                    gitemail: '$BUILD_REQUESTEDFOREMAIL'
                    user: $(WIKI_REPO_USER)
                    password: $(WIKI_REPO_PAT)
                    useAgentToken: false
                    trimLeadingSpecialChar: true
                    fixSpaces: true
                    insertLinefeed: false
                }
            }
        }

        stage('Third Party License Check') {
            steps {
                echo 'Checking third-party licenses...'
                script {
                    sh 'node thirdPartyCheck.js'
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the artifact...'
                sh 'npm run deploy'
            }
        }
    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build or deployment failed.'
        }
    }
}



