pipeline {
    agent any

    environment {
        ARTIFACT_NAME = 'agbar-fh-kafka2kafka'
    }

    options {
        timestamps()
        ansiColor('xterm')
    }

    tools {
        nodejs '20.11.1'
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
                sh 'git fetch --unshallow || true'
            }
        }

        stage('Install Production Dependencies') {
            steps {
                sh 'yarn install'
            }
        }

        stage('Build Artifact') {
            steps {
                sh 'yarn run build:production'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'yarn install --production'
            }
        }

        stage('Prepare Artifacts') {
            matrix {
                axes {
                    axis {
                        name 'PLATFORM'
                        values 'linux', 'windows'
                    }
                }
                stages {
                    stage('Copy node_modules') {
                        steps {
                            script {
                                if (isUnix()) {
                                    sh '''
                                    mkdir -p artifacts/${PLATFORM}/node_modules
                                    cp -r node_modules/* artifacts/${PLATFORM}/node_modules/
                                    '''
                                } else {
                                    bat '''
                                    mkdir artifacts\\${PLATFORM}\\node_modules
                                    xcopy /E /I node_modules\\* artifacts\\${PLATFORM}\\node_modules\\
                                    '''
                                }
                            }
                        }
                    }

                    stage('Archive Artifacts') {
                        steps {
                            sh '''
                            mkdir -p ${ARTIFACT_NAME}
                            cd artifacts
                            tar -czf ../${ARTIFACT_NAME}/${ARTIFACT_NAME}-${PLATFORM}.tar.gz ${PLATFORM}
                            '''
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    if (isUnix()) {
                        sh "docker build -t myregistry/${ARTIFACT_NAME}:latest ."
                    } else {
                        bat "docker build -t myregistry/${ARTIFACT_NAME}:latest ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        if (isUnix()) {
                            sh '''
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin myregistry
                            docker push myregistry/${ARTIFACT_NAME}:latest
                            '''
                        } else {
                            bat '''
                            echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin myregistry
                            docker push myregistry/${ARTIFACT_NAME}:latest
                            '''
                        }
                    }
                }
            }
        }

        stage('Publish Release Notes') {
            steps {
                script {
                    def releaseNotes = """## Release\n\n- New features and bug fixes included.\n- Docker images updated.\n"""
                    writeFile file: 'release_notes.md', text: releaseNotes
                    archiveArtifacts artifacts: 'release_notes.md', allowEmptyArchive: true
                }
            }
        }

        stage('Publish Artifacts') {
            steps {
                archiveArtifacts artifacts: "${ARTIFACT_NAME}/*.tar.gz", fingerprint: true
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
    }
}


